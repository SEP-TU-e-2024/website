# Generated by Django 5.0.4 on 2024-06-10 13:19

import uuid

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='StorageLocation',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('filepath', models.CharField(blank=True, max_length=256, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='EvaluationSettings',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('cpu', models.IntegerField()),
                ('time_limit', models.FloatField()),
            ],
            options={
                'verbose_name': 'evaluation settings',
                'verbose_name_plural': 'evaluation settings',
            },
        ),
        migrations.CreateModel(
            name='Metric',
            fields=[
                ('name', models.CharField(max_length=64, primary_key=True, serialize=False, unique=True)),
                ('label', models.CharField(max_length=128)),
                ('unit', models.CharField(blank=True, choices=[('', 'None'), ('s', 'Seconds'), ('min', 'Minutes'), ('h', 'Hours')], default='', max_length=4)),
                ('order', models.IntegerField(choices=[(0, 'Cost'), (1, 'Reward')], default=0)),
            ],
        ),
        migrations.CreateModel(
            name='ProblemCategory',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=256)),
                ('style', models.IntegerField(choices=[(0, 'Competition'), (1, 'Scientific')], default=1)),
                ('type', models.IntegerField(choices=[(0, 'Static'), (1, 'Dynamic')], default=0)),
                ('description', models.TextField(max_length=2048)),
            ],
            options={
                'verbose_name': 'problem category',
                'verbose_name_plural': 'problem categories',
            },
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('email', models.EmailField(max_length=255, unique=True)),
                ('name', models.CharField(blank=True, max_length=255, null=True)),
                ('is_staff', models.BooleanField(default=False)),
                ('is_superuser', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=False)),
                ('password', models.CharField(blank=True, max_length=128, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='BenchmarkInstance',
            fields=[
                ('storagelocation_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='api.storagelocation')),
            ],
            bases=('api.storagelocation',),
        ),
        migrations.CreateModel(
            name='Simulator',
            fields=[
                ('storagelocation_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='api.storagelocation')),
            ],
            bases=('api.storagelocation',),
        ),
        migrations.CreateModel(
            name='Validator',
            fields=[
                ('storagelocation_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='api.storagelocation')),
            ],
            bases=('api.storagelocation',),
        ),
        migrations.CreateModel(
            name='SpecifiedProblem',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(default='unnamed', max_length=256)),
                ('category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='specified_problems', to='api.problemcategory')),
                ('evaluation_settings', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='api.evaluationsettings')),
                ('metrics', models.ManyToManyField(to='api.metric')),
                ('scoring_metric', models.ForeignKey(default='run_time', on_delete=django.db.models.deletion.PROTECT, related_name='specifiedproblem_ranking_set', to='api.metric')),
                ('benchmark_instances', models.ManyToManyField(to='api.benchmarkinstance')),
            ],
        ),
        migrations.AddField(
            model_name='problemcategory',
            name='simulator',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.simulator'),
        ),
        migrations.CreateModel(
            name='Submission',
            fields=[
                ('storagelocation_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='api.storagelocation')),
                ('name', models.CharField(default='unnamed', max_length=256, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('is_verified', models.BooleanField(default=False)),
                ('is_downloadable', models.BooleanField(default=False)),
                ('problem', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.specifiedproblem')),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            bases=('api.storagelocation',),
        ),
        migrations.CreateModel(
            name='Result',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('score', models.DecimalField(decimal_places=2, max_digits=6)),
                ('metric', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.metric')),
                ('benchmark_instance', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='api.benchmarkinstance')),
                ('submission', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='api.submission')),
            ],
        ),
        migrations.AddField(
            model_name='problemcategory',
            name='validator',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.validator'),
        ),
    ]
